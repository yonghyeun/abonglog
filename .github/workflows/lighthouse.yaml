name: Run lighthouse CI When Push
on: [push]
jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 20.10.0
        uses: actions/setup-node@v1
        with:
          node-version: 20.10.0

      - name: Install packages
        working-directory: ./blog
        run: |
          npm ci

      - name: Build
        working-directory: ./blog
        run: |
          npm run build

      - name: Run Lighthouse CI
        working-directory: ./blog
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI completed with warnings"
          echo "Checking Lighthouse CI results directory:"
          ls -la .lighthouseci/

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            try {
              const manifestPath = 'blog/.lighthouseci/manifest.json';
              console.log('Looking for Lighthouse results at:', manifestPath);
              
              const results = JSON.parse(fs.readFileSync(manifestPath));
              let comments = "";

              results.forEach((result) => {
                const { summary, jsonPath } = result;
                console.log('Processing Lighthouse report:', jsonPath);
                const details = JSON.parse(fs.readFileSync(jsonPath));
                const { audits } = details;
                
                const formatResult = (res) => Math.round(res * 100);

                Object.keys(summary).forEach(
                  (key) => (summary[key] = formatResult(summary[key]))
                );

                const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

                const comment = [
                  `‚ö°Ô∏è Lighthouse report!`,
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                  `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                  `| ${score(summary.bestPractices)} Best Practices | ${summary.bestPractices} |`,
                  `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                  `| ${score(summary.pwa)} PWA | ${summary.pwa} |`
                ].join("\n");

                const detail = [
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${score(
                    audits["first-contentful-paint"].score * 100
                  )} First Contentful Paint | ${
                    audits["first-contentful-paint"].displayValue
                  } |`,
                  `| ${score(
                    audits["interactive"].score * 100
                  )} Time to Interactive | ${audits["interactive"].displayValue} |`,
                  `| ${score(
                    audits["speed-index"].score * 100
                  )} Speed Index | ${audits["speed-index"].displayValue} |`,
                  `| ${score(
                    audits["total-blocking-time"].score * 100
                  )} Total Blocking Time | ${
                    audits["total-blocking-time"].displayValue
                  } |`,
                  `| ${score(
                    audits["largest-contentful-paint"].score * 100
                  )} Largest Contentful Paint | ${
                    audits["largest-contentful-paint"].displayValue
                  } |`,
                  `| ${score(
                    audits["cumulative-layout-shift"].score * 100
                  )} Cumulative Layout Shift | ${
                    audits["cumulative-layout-shift"].displayValue
                  } |`
                ].join("\n");
                comments += comment + "\n" + detail + "\n";
              });
              core.setOutput('comments', comments);
            } catch (error) {
              console.error('Error processing Lighthouse results:', error);
              core.setFailed(error.message);
            }

      - name: Comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments }}

